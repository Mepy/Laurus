Lower = String([a-z][a-zA-Z0-9_]*)
Upper = String([A-Z][a-zA-Z0-9_]*)
Symbol = String([a-zA-Z][a-zA-Z0-9_]*)
MethodName = String([a-z][a-zA-Z0-9_]*)
ConstructorName = String([A-Z][a-zA-Z0-9_]*)
TypeName = String([A-Z]+(\[[A-Z][a-zA-Z0-9_]*\])?)

Eq = (=)
Colon = (:)
ColonColon = (::)
Shift = (@shift|@right)
Reduce = (@reduce|@left)
Esc = (\\)
EscNo = Char([^\\\/\.\*\+\?\-\^\|\[\]\(\)])
EscOrigin = Char::esc_origin([\\\/\.\*\+\?\-\^\|\[\]\(\)])
EscSpace = Char::esc_space([stn])
EscU = (u)
EscUnicode = Char::esc_unicode
    ([0-9a-fA-F]
    |[0-9a-fA-F][0-9a-fA-F]
    |[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]
    |[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]
    |[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]
    |10[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]
    )
Dot = (\.)
Star = (\*)
Plus = (\+)
Ques = (\?)
To = (\-)
Caret = (\^)
Or = (\|)
Tilde =(~)
LParen = (\()
RParen = (\))
LBrack = (\[)
RBrack = (\])
LBrace = ({)
LBrace = (})

Percent = %
Start = start
Space = space

CommentHead = (\/\/)
CommentBody = String([^\n]*)


%start cur

// @self 
// waiting for @attribute system
cur : Laurus {
= empty()
= add_comment(cur CommentHead CommentBody)
= set_space(cur Percent Space reg_exp)
= set_start(cur Percent Start Lower)
= add_token(cur [token_name : Upper] Eq [token_conv~] LParen [reg_exp~] RParen)
= add_sort(cur [sort_name : Lower] [sort_type~] LBrace [rules~] RBrace)
}

sort_type : SortType {
= Ignore()
= Atom(Colon TypeName)
= Gen(Colon TypeName LBrack generics RBrack)
}

generics : Generics {
= Atom(TypeName)
= Gen(TypeName LBrack generics RBrack)
}

// @self 
rules : Array[Rule] {
= empty()
= snoc(rules rule)
}

rule : Rule {
= ([priority~] [shift_reduce~] [action~] LParen [symbols~] RParen)
}

priority : Priority {
= Equal(Eq)
= Higher(Or)
}

shift_reduce : ShiftReduce {
= Reduce()
= Reduce(Reduce)
= Shift(Shift)
}

// semantic action for reduce
action : Action {
= Simple()
= Constructor(ConstructorName)
= Method(MethodName)
}

// @self 
symbols : Array[Symbol] {
= empty()
= snoc(symbols symbol)
}


symbol : Symbol {
= Unnamed(Symbol)
= Named(LBrack [field_name : Lower] Colon Symbol RBrack)
= NamedAbbrev(LBrack [field_sort_name : FieldName] Tilde RBrack) 
}


// Builtin = { String, Lexeme }
token_conv : TokenConv {
= Ignore()
= Builtin(TypeName)
= Conversion([type_name : TypeName] ColonColon [parse_func_name : MethodName])
}

reg_exp : RegExp {
= (LParen reg_exp RParen)
= Bor(LBrack ranges RBrack)
= Bnot(LBrack Caret ranges RBrack)
= Any(Dot)
= Emp()
| Union(reg_exp Or reg_exp) 
| Seq(reg_exp reg_exp) 
| Star(reg_exp Star)
= Plus(reg_exp Plus)
= Ques(reg_exp Ques)
| Single(char)
}

// @self 
ranges : Array[Range] {
= singleton(range)
= snoc(ranges range)
}

range : Range {
= single(char)
= (char To char)
}

char : Char {
= (EscNo)
= (Esc EscOrigin)
= (Esc EscSpace)
= (Esc EscU EscUnicode)
}